//file:noinspection GradlePackageVersionRange
plugins {
	id "fabric-loom" version "1.0.+"
	id "io.github.juuxel.loom-quiltflower" version "1.+" // Quiltflower, a better decompiler
	id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
	id "org.ajoberstar.grgit" version "4.1.1"
	id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
group = project.maven_group

ext.buildNumber = System.getenv("GITHUB_RUN_NUMBER")
String patch = buildNumber != null ? buildNumber : "99999"
version = project.mod_version.replace("<build>", patch)

repositories {
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://maven.bai.lol" }
	maven { url = "https://maven.terraformersmc.com/releases/" }
	maven { url = "https://maven.shedaniel.me/" }
}

dependencies {
	// dev environment
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings(loom.layered {
		it.mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.qm_version}:intermediary-v2")
		it.parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
		it.officialMojangMappings { nameSyntheticMembers = false }
	})
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
	modLocalRuntime("maven.modrinth:lazydfu:0.1.2")
	modLocalRuntime("maven.modrinth:suggestion-tweaker:${project.suggestion_tweaker_version}+fabric")
	modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api") }
	modLocalRuntime("mcp.mobius.waila:wthit:${project.wthit_version}")
	modLocalRuntime("maven.modrinth:badpackets:${project.bad_packets_version}")
	modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}") { exclude group: "net.fabricmc"; exclude group: "net.fabricmc.fabric-api" }

	// dependencies
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
}

processResources {
	Map<String, String> properties = new HashMap<>()
	properties.put("version", project.version)
	properties.put("loader_version", project.loader_version)
	properties.put("fabric_version", project.fabric_version)
	properties.put("minecraft_version", project.minecraft_version)
	properties.put("java_version", sourceCompatibility)

	properties.forEach((k, v) -> inputs.property(k, v))

	filesMatching("fabric.mod.json") {
		expand properties
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}
